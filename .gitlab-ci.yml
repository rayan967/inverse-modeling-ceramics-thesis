default:
  tags:
    - bay-013-srv-035

# Used to prevent merge requests from triggering a second pipeline.
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE != 'merge_request_event'

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_FORCE_HTTPS: "true"

cache:
  paths:
    - mercurydpm-structure-generation/build
    - .venv/

stages:
  - Static Analysis
  - Test

before_script:
  # Print out python version for debugging.
  - python -V
  - python --version
  - pip --version
  - pip install poetry
  - poetry --version
  - poetry env remove --all
  - poetry env use python
  - poetry config virtualenvs.create true --local
  - poetry config virtualenvs.in-project true --local # used to create the virtual environment in .venv
  - poetry env list
  - poetry env info
  # build mercurydpm structure generator
  - cd incoker-inv/incoker-micro-sims/mercurydpm-structure-generation
  - mkdir -p build && cd build
  - cmake ..
  - cmake --build . -j 4 --target generate_structure
  - cd ${CI_PROJECT_DIR}
  - echo "done building."

# Run tests on the code.
# This will run the tests located in the tests/ directory of the project.
# The pipeline will report failing tests and cancel the execution on any error.
# In addition, a coverage report will be generated, detailing which parts
# of the code are actually covered by tests.
test:
  stage: Test
  # allow_failure: true
  script:
    - poetry install --with test
    - poetry show --with test
    - xvfb-run -a poetry run py.test
    - poetry run python -c "import json;import pathlib;import anybadge;v=json.loads(pathlib.Path('coverage.json').read_text())['totals']['percent_covered_display'];anybadge.Badge('coverage',v,thresholds={2:'red',4:'orange',8:'yellow',10:'green'}).write_badge(f'coverage.svg')"
  artifacts:
    paths:
      - htmlcov
      - coverage.xml
      - coverage.svg
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml
    when: always

# Run static code analysis.
# By default, this will check whether your code confirms to PEP8 code style guideline
# (https://www.python.org/dev/peps/pep-0008/) and the docstring format matches numpy's proposed
# docstring style (https://numpydoc.readthedocs.io/en/latest/format.html).
# It will also publish a report file highlighting problems in the code.
flake8:
  stage: Static Analysis
  allow_failure: true
  script:
    - poetry install --with analysis
    - poetry run flake8
  artifacts:
    paths:
      - flake-report
    when: on_failure

# Run pylint.
# Measures quality of code by checking, if conventions are not broken in the code.
# Will output an .html with a list of warnings as an artifact.
pylint:
  stage: Static Analysis
  allow_failure: true
  script:
    - poetry install --with analysis
    - poetry run pylint incoker-inv || EXIT_CODE=$?
    - poetry run pylint-json2html -o pylint_result.html pylint_result.json
    - poetry run python -c "import re;import pathlib;import anybadge;v=float(re.search(r'Your code has been rated at (\d+\.\d+)',pathlib.Path('pylint_result.txt').read_text())[1]);anybadge.Badge('pylint',v,thresholds={2:'red',4:'orange',8:'yellow',10:'green'}).write_badge(f'pylint.svg')"
  artifacts:
    paths:
      - pylint_result.html
      - pylint.svg
    when: on_success

isort:
  stage: Static Analysis
  allow_failure: true
  script:
    - poetry install --with analysis
    - poetry run isort incoker-inv --check

black:
  stage: Static Analysis
  allow_failure: true
  script:
    - poetry install --with analysis
    - poetry run black incoker-inv --check --verbose --diff --color > black_result.txt
  artifacts:
    paths:
      - black_result.txt
    when: always